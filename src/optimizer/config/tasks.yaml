cv_analysis_task:
  description: >
    Parse and structure the CV/resume data from the provided file path ({candidate_cv_path})
    into a standardized CurriculumVitae schema. Follow these rules:

    **1. Data Extraction**
    - Parse the input file (text format: JSON, YAML, or plain text)
    - Extract all relevant information including personal details, experience, education, skills

    **2. Schema Compliance**
    - Structure data according to the CurriculumVitae Pydantic model
    - Ensure all required fields are populated
    - Organize skills into appropriate categories (Languages, Technologies, Patterns & Principles)

    **3. Experience Categorization**
    - Separate main experience from additional/earlier experience
    - Extract detailed responsibilities as individual bullet points
    - Preserve dates, locations, and company information

    **4. Skills Organization**
    - Group technical skills into logical categories
    - Distinguish between programming languages, frameworks, tools, and methodologies
    - Extract both hard and soft skills appropriately

    **5. Data Quality**
    - Normalize formatting and terminology
    - Ensure consistency in date formats, location formats
    - Preserve all quantifiable achievements and metrics

    Output must be a valid CurriculumVitae object that matches the established schema.
  expected_output: >
    A structured CurriculumVitae JSON object with all sections properly organized
    and compliant with the established schema, ready for optimization processing.
  output_file: "{output_directory}/original_cv.json"
  agent: cv_analyst

job_analysis_task:
  description: >
    Analyze the job posting URL provided ({job_posting_url}) and extract structured
    information into the JobPosting schema. Follow these rules:

    **1. Metadata**
    - Extract job title, company name, industry, full description, and experience level.

    **2. Requirements**
    - Extract degrees, certifications, and explicit "years of experience" requirements.
    - Identify hard requirements (licenses, mandatory credentials).

    **3. Skills**
    - Technical skills: programming languages, frameworks, cloud platforms, tools.
    - Soft skills: communication, teamwork, leadership, problem-solving.
    - Preferred skills: "nice-to-have" extras.

    **4. Responsibilities**
    - Bullet out day-to-day tasks, focusing on specific duties (not vague culture blurbs).

    **5. ATS Alignment**
    - Keywords: important phrases used in the posting for filtering.
    - Tools/tech stack: specific named technologies (AWS, Docker, React, etc).

    **6. Normalization**
    - Deduplicate terms (merge "Python 3" and "Python").
    - Expand acronyms if possible (e.g., "CI/CD" -> "Continuous Integration / Continuous Deployment").
    - Filter out vague corporate jargon ("fast-paced environment", "great culture").

    Output must be a valid JobPosting object.
  expected_output: >
    A validated JobPosting object with all fields populated where possible,
    ensuring consistency and ATS-awareness.
  output_file: "{output_directory}/job_posting.json"
  agent: job_analyst

cv_alignment_task:
  description: >
    Analyze the candidate’s CurriculumVitae and the JobPosting to generate a CvTransformationPlan — a structured proposal for aligning the CV to the job requirements.

    Focus ONLY on modifying the following fields within the fixed CV schema:
    - summary_of_qualifications
    - experience[].responsibilities
    - profession
    - core_expertise

    For each, identify what can be improved based on concrete evidence from the knowledge base.

    **Rules:**
    - Use exact terminology from the job posting.
    - DO NOT fabricate experience or make changes without evidence.
    - Maintain the schema structure: no new fields or reordering allowed.

    **Steps:**
    1. Compare JobPosting requirements to the current CurriculumVitae content.
    2. For each skill, technology, or requirement in the JobPosting:
      a. Run a targeted search against the knowledge base: 
          "What experience does [candidate name] have with [item]?"
      b. If the knowledge base returns concrete experience, treat the skill as **matched** and include relevant improvements in the plan.
      c. Only list a skill in `missing_skills` if:
          - It is **not present** in the CV, **AND**
          - The knowledge base returns no useful or relevant experience.
    3. Use only verified experience when suggesting edits.
    4. Cite file paths for all matching evidence used in the transformation plan.

    **Rules:**
    - Every item in `missing_skills` must be preceded by a failed search in the knowledge base.

    **Output:**
    A CvTransformationPlan object with proposed modifications and justifications,
    limited to the four editable fields only.

  expected_output: >
    A CvTransformationPlan JSON object detailing proposed edits,
    grounded in the JobPosting and supported by concrete evidence.
  output_file: "{output_directory}/cv_transformation_plan.json"
  agent: cv_strategist

cv_transformation_task:
  description: >
    Apply the provided CvTransformationPlan to update the candidate's CurriculumVitae object for alignment with the JobPosting.

    You will receive:
    - CurriculumVitae: the original CV
    - JobPosting: the structured job requirements
    - CvTransformationPlan: a set of verified, evidence-based content updates

    **Primary fields to update:**
    1. profession — update using CvTransformationPlan.profession_optimization
    2. core_expertise — apply changes from CvTransformationPlan.core_expertise_changes
    3. summary_of_qualifications — rewrite bullets per CvTransformationPlan.summary_qualification_rewrites
    4. experience[].responsibilities — apply updates from CvTransformationPlan.experience_responsibility_updates

    **Additional Optimizations:**
    - Inject CvTransformationPlan.quantifications to add measurable impact
    - Apply CvTransformationPlan.terminology_alignment for keyword optimization

    **Rules:**
    - Modify only the specified fields. Do not alter CV structure, layout, or schema.
    - Preserve all data types and list formats.
    - Do not fabricate or re-interpret — follow the plan exactly.
    - Maintain professional tone, clarity, and formatting.

    **Output:**
    An updated CurriculumVitae object reflecting all approved transformations and optimized for both ATS and human review.
  expected_output: >
    A CurriculumVitae object with updated field content, based on the CvTransformationPlan and aligned with the JobPosting.
  output_file: "{output_directory}/optimized_cv.json"
  agent: cv_rewriter
