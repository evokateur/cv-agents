job_analysis_task:
  description: >
    Analyze the job posting URL provided ({job_posting_url}) and extract structured
    information into the JobPosting schema. Follow these rules:

    **1. Metadata**
    - Extract job title, company name, industry, full description, and experience level.

    **2. Requirements**
    - Extract degrees, certifications, and explicit "years of experience" requirements.
    - Identify hard requirements (licenses, mandatory credentials).

    **3. Skills**
    - Technical skills: programming languages, frameworks, cloud platforms, tools.
    - Soft skills: communication, teamwork, leadership, problem-solving.
    - Preferred skills: "nice-to-have" extras.

    **4. Responsibilities**
    - Bullet out day-to-day tasks, focusing on specific duties (not vague culture blurbs).

    **5. ATS Alignment**
    - Keywords: important phrases used in the posting for filtering.
    - Tools/tech stack: specific named technologies (AWS, Docker, React, etc).

    **6. Normalization**
    - Deduplicate terms (merge "Python 3" and "Python").
    - Expand acronyms if possible (e.g., "CI/CD" -> "Continuous Integration / Continuous Deployment").
    - Filter out vague corporate jargon ("fast-paced environment", "great culture").

    Output must be a valid JobPosting object.
  expected_output: >
    A validated JobPosting object with all fields populated where possible,
    ensuring consistency and ATS-awareness.
  output_file: "{output_directory}/job_analysis.json"
  agent: job_analyst

cv_alignment_task:
  description: >
    You will receive three structured inputs:

    1. A JobPosting object (from the job_analysis_task)
    2. The candidate's base CV at {candidate_cv_path}
    3. Access to the candidate's knowledge base through tools

    Your job is NOT to rewrite the CV. Your job is to create a
    CvTransformationPlan that describes how the base CV should be updated
    to align more closely with the JobPosting, using the Knowledge Base
    to strengthen and extend the candidate’s evidence.

    Process:

    1) Compare the JobPosting with the base CV
       - Identify which skills, responsibilities, and requirements are already present
       - Identify what is missing or underemphasized

    2) Search the Knowledge Base
       - Retrieve projects, achievements, or details not in the base CV
       - Add them to the plan as "additions" with supporting evidence

    3) Construct the transformation plan
       - additions: new items to insert (from KB or inferred gaps)
       - rewrites: suggestions to improve existing bullets (language, metrics, keywords)
       - removals: items irrelevant to this role
       - reordering: sections/experiences to surface more prominently
       - quantifications: where to inject concrete metrics
       - terminology_alignment: phrases to swap to match JobPosting keywords

    Guardrails:
    - Use only facts from the base CV or knowledge base. Do not invent employers, projects, or dates.
    - If important data is missing, include a TODO in the plan but do not fabricate.
    - Always cite KB evidence (file paths or doc titles) where possible.

    Tool usage:
    - Use the SemanticSearchTool with a single natural-language query string.
    - Do not pass structured JSON as the query.
    - After retrieving results, use FileReadTool to expand context as needed.

  expected_output: >
    A CvTransformationPlan JSON object containing a concrete edit plan
    shaped by BOTH the JobPosting and the candidate's knowledge base.
  output_file: "{output_directory}/cv_transformation_plan.json"
  agent: cv_adviser

cv_optimization_task:
  description: >
    You will receive three inputs to complete this task:

    1. A structured job posting object with the following fields:
    [[JobPosting]]

    2. A structured CV transformation plan object with the following fields:
    [[CvTransformationPlan]]

    3. A file path to the candidate's current CV:
    {candidate_cv_path}

    Use your file reading tool to read and analyze the candidate's current CV from this path. 
    The CV may be in various formats (JSON, YAML, CSV) and will need to be interpreted and 
    restructured into the output format.

    Your task is to implement the CV transformation plan by:
    - Following the specific guidance provided in the CvTransformationPlan
    - Prioritizing experiences that the plan identifies as most relevant
    - Rewriting descriptions according to the plan's recommendations
    - Implementing ATS keyword optimizations specified in the plan
    - Restructuring sections as outlined in the transformation strategy
    - Adding quantifications and metrics as directed by the plan
    - Aligning language and terminology with both job posting and plan guidance

    Your final output must be a structured CurriculumVitae object that is tailored to the job requirements and enriched with the candidate’s strongest qualifications.
  expected_output: >
    A CurriculumVitae object with restructured and rewritten content sections
    tailored specifically to the job requirements, optimized for both ATS
    and human review.
  output_file: "{output_directory}/cv_optimization.json"
  agent: cv_strategist
