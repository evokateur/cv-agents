job_analysis_task:
  description: >
    Analyze the job posting URL provided ({job_posting_url}) and extract structured
    information into the JobPosting schema. Follow these rules:

    **1. Metadata**
    - Extract job title, company name, industry, full description, and experience level.

    **2. Requirements**
    - Extract degrees, certifications, and explicit "years of experience" requirements.
    - Identify hard requirements (licenses, mandatory credentials).

    **3. Skills**
    - Technical skills: programming languages, frameworks, cloud platforms, tools.
    - Soft skills: communication, teamwork, leadership, problem-solving.
    - Preferred skills: "nice-to-have" extras.

    **4. Responsibilities**
    - Bullet out day-to-day tasks, focusing on specific duties (not vague culture blurbs).

    **5. ATS Alignment**
    - Keywords: important phrases used in the posting for filtering.
    - Tools/tech stack: specific named technologies (AWS, Docker, React, etc).

    **6. Normalization**
    - Deduplicate terms (merge "Python 3" and "Python").
    - Expand acronyms if possible (e.g., "CI/CD" -> "Continuous Integration / Continuous Deployment").
    - Filter out vague corporate jargon ("fast-paced environment", "great culture").

    Output must be a valid JobPosting object.
  expected_output: >
    A validated JobPosting object with all fields populated where possible,
    ensuring consistency and ATS-awareness.
  output_file: "{output_directory}/job_analysis.json"
  agent: job_analyst

cv_alignment_task:
  description: >
    You will receive structured job requirements from the job analysis task:

    [[JobPosting]]

    Your task is to build a comprehensive profile of the job candidate using the following approach:

    1. **Primary Data Source - CV Analysis:**
       Read the candidate's current CV at {candidate_cv_path} to extract basic information 
       like name, contact details, work history, and skills overview.

    2. **Knowledge Base Enhancement:**
       Use the CandidateKnowledgeBase tool to search for additional context and details 
       about the candidate's work experience and qualifications.

    When constructing the profile of the candidate, focus on:

    - Projects and experiences that match required and preferred skills
    - Relevant technical achievements and their business impact
    - Leadership and collaboration examples appropriate to the role level
    - Domain expertise aligned with the industry and responsibilities
    - Quantifiable results and measurable outcomes from past work

    Use semantic search to find related experiences, even if the match is not exact. 

    To use the SemanticSearchTool:
    - Always call it with exactly one argument: {"query": "<natural language text>"}
    - Do not pass structured data, JSON objects, or dictionaries as the query.
    - Convert the relevant job requirements into a single natural language query string first.
    - The tool returns relevant text chunks along with their source file paths.

    Example of correct usage:
    {"query": "Find projects and experiences related to backend engineering with Python and AWS in the fintech industry."}

    Example of incorrect usage (do NOT do this):
    {"query": {"description": "Python, AWS, backend"}}  

    When the SemanticSearchTool returns results, each result includes a "Source:" line 
    with the full file path. You can read the complete document using the FileReadTool with 
    that exact path to get additional context and details.

    Summarize and integrate retrieved findings into a structured CvTransformationPlan object
    tailored to the provided job requirements.
  expected_output: >
    A structured CvTransformationPlan containing relevant experiences, matching skills,
    key projects, achievements, and contextual information tailored to the job requirements.
  output_file: "{output_directory}/cv_transformation_plan.json"
  context: [job_analysis_task]
  agent: cv_advisor

cv_optimization_task:
  description: >
    You will receive three inputs to complete this task:

    1. A structured job posting object with the following fields:
    [[JobPosting]]

    2. A structured CV transformation plan object with the following fields:
    [[CvTransformationPlan]]

    3. A file path to the candidate's current CV:
    {candidate_cv_path}

    Use your file reading tool to read and analyze the candidate's current CV from this path. 
    The CV may be in various formats (JSON, YAML, CSV) and will need to be interpreted and 
    restructured into the output format.

    Your task is to implement the CV transformation plan by:
    - Following the specific guidance provided in the CvTransformationPlan
    - Prioritizing experiences that the plan identifies as most relevant
    - Rewriting descriptions according to the plan's recommendations
    - Implementing ATS keyword optimizations specified in the plan
    - Restructuring sections as outlined in the transformation strategy
    - Adding quantifications and metrics as directed by the plan
    - Aligning language and terminology with both job posting and plan guidance

    Your final output must be a structured CurriculumVitae object that is tailored to the job requirements and enriched with the candidateâ€™s strongest qualifications.
  expected_output: >
    A CurriculumVitae object with restructured and rewritten content sections
    tailored specifically to the job requirements, optimized for both ATS
    and human review.
  output_file: "{output_directory}/cv_optimization.json"
  context: [job_analysis_task, cv_alignment_task]
  agent: cv_strategist
