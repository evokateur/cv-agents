job_analysis_task:
  description: >
    Analyze the job posting URL provided ({job_posting_url}) and extract structured
    information into the JobPosting schema. Follow these rules:

    **1. Metadata**
    - Extract job title, company name, industry, full description, and experience level.

    **2. Requirements**
    - Extract degrees, certifications, and explicit "years of experience" requirements.
    - Identify hard requirements (licenses, mandatory credentials).

    **3. Skills**
    - Technical skills: programming languages, frameworks, cloud platforms, tools.
    - Soft skills: communication, teamwork, leadership, problem-solving.
    - Preferred skills: "nice-to-have" extras.

    **4. Responsibilities**
    - Bullet out day-to-day tasks, focusing on specific duties (not vague culture blurbs).

    **5. ATS Alignment**
    - Keywords: important phrases used in the posting for filtering.
    - Tools/tech stack: specific named technologies (AWS, Docker, React, etc).

    **6. Normalization**
    - Deduplicate terms (merge "Python 3" and "Python").
    - Expand acronyms if possible (e.g., "CI/CD" -> "Continuous Integration / Continuous Deployment").
    - Filter out vague corporate jargon ("fast-paced environment", "great culture").

    Output must be a valid JobPosting object.
  expected_output: >
    A validated JobPosting object with all fields populated where possible,
    ensuring consistency and ATS-awareness.
  output_file: "{output_directory}/job_analysis.json"
  agent: job_analyst

cv_alignment_task:
  description: >
    MISSION: Create a CvTransformationPlan that describes how to update the candidate's CV 
    to align with the JobPosting requirements, using Knowledge Base evidence.

    INPUT CONTEXT:
    1. JobPosting object (from job_analysis_task) - contains exact requirements
    2. Candidate's CV at {candidate_cv_path} - current qualifications  
    3. Knowledge Base - additional projects and achievements via tools

    CRITICAL PROCESS:

    STEP 1: Analyze JobPosting Requirements
    - Extract JobPosting.technical_skills, hard_requirements, preferred_skills from context
    - Note exact terminology used (e.g., "data analysis experience", "PHP")
    - Identify specific technologies, frameworks, and skill areas

    STEP 2: Inventory Current CV  
    - Read candidate's CV completely
    - List current skills, technologies, and experiences
    - Note gaps compared to JobPosting requirements

    STEP 3: Strategic Knowledge Base Search
    IMPORTANT: The SemanticSearchTool returns LLM-synthesized responses, not raw chunks.
    When you query "data analysis experience", you get intelligent analysis like:
    "Experience in data analysis includes ETL pipeline development, SQL optimization..."
    
    Search Strategy:
    - Search for each missing skill individually (e.g., "data analysis experience")
    - Search for specific technologies (e.g., "PHP WordPress development")  
    - Search for relevant experience types (e.g., "large-scale systems architecture")
    - The tool response will intelligently connect technical work to conceptual skills

    SKILL INTERPRETATION RULES:
    - If SemanticSearchTool says "experience in X includes Y activities", then the candidate HAS experience in X
    - Technical work often demonstrates broader skills:
      * ETL pipelines + SQL optimization = "data analysis experience"
      * System architecture + performance tuning = "large-scale systems experience"
      * Code reviews + technical discussions = "collaboration skills"
    - Only mark skills as "missing" if Knowledge Base search finds NO related experience

    STEP 4: Build Transformation Plan
    - additions: Specific evidence from Knowledge Base with exact quotes and file paths
    - missing_skills: ONLY skills with zero related experience in CV or Knowledge Base
    - matching_skills: Skills clearly present in CV or found via Knowledge Base search
    - rewrites: Specific language improvements with before/after examples

    EXAMPLES:
    
    GOOD Analysis:
    JobPosting requires: "data analysis experience"
    Knowledge Base search returns: "Experience in data analysis includes ETL pipelines, SQL transformations, query optimization"  
    Conclusion: Candidate HAS data analysis experience → add to matching_skills, create additions with specific examples
    
    BAD Analysis:  
    JobPosting requires: "data analysis experience"
    Knowledge Base search returns: detailed technical evidence
    Conclusion: Mark as missing_skills ← WRONG! The search found relevant experience.

    TOOL USAGE:
    SemanticSearchTool takes only a simple string - do not use JSON format.
    Example: SemanticSearchTool("data analysis experience")
    
    GUARDRAILS:
    - Use EXACT JobPosting terminology and company name
    - Never fabricate employers, projects, or dates
    - Cite specific Knowledge Base file paths for all evidence
    - If truly no evidence exists, mark as TODO in plan

  expected_output: >
    A CvTransformationPlan JSON object containing a concrete edit plan
    shaped by BOTH the JobPosting and the candidate's knowledge base.
  output_file: "{output_directory}/cv_transformation_plan.json"
  agent: cv_adviser

cv_optimization_task:
  description: >
    You will receive three inputs to complete this task:

    1. A structured job posting object with the following fields:
    [[JobPosting]]

    2. A structured CV transformation plan object with the following fields:
    [[CvTransformationPlan]]

    3. A file path to the candidate's current CV:
    {candidate_cv_path}

    Use your file reading tool to read and analyze the candidate's current CV from this path. 
    The CV may be in various formats (JSON, YAML, CSV) and will need to be interpreted and 
    restructured into the output format.

    Your task is to implement the CV transformation plan by:
    - Following the specific guidance provided in the CvTransformationPlan
    - Prioritizing experiences that the plan identifies as most relevant
    - Rewriting descriptions according to the plan's recommendations
    - Implementing ATS keyword optimizations specified in the plan
    - Restructuring sections as outlined in the transformation strategy
    - Adding quantifications and metrics as directed by the plan
    - Aligning language and terminology with both job posting and plan guidance

    Your final output must be a structured CurriculumVitae object that is tailored to the job requirements and enriched with the candidate’s strongest qualifications.
  expected_output: >
    A CurriculumVitae object with restructured and rewritten content sections
    tailored specifically to the job requirements, optimized for both ATS
    and human review.
  output_file: "{output_directory}/cv_optimization.json"
  agent: cv_strategist
